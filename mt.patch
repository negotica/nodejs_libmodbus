diff -cr -x .git ./libmodbus.orig/src/modbus.c ./libmodbus/src/modbus.c
*** ./libmodbus.orig/src/modbus.c	2015-04-16 15:44:03.678764733 +0200
--- ./libmodbus/src/modbus.c	2015-04-16 13:01:48.582426439 +0200
***************
*** 1762,1773 ****
--- 1762,1782 ----
      ctx->backend->close(ctx);
  }
  
+ void modbus_close_mt(modbus_t *ctx)
+ {
+      if (ctx == NULL)
+          return;
+    
+      ctx->backend->close_mt(ctx);
+ }
+ 
  void modbus_free(modbus_t *ctx)
  {
      if (ctx == NULL)
          return;
  
      ctx->backend->free(ctx);
+     free(ctx->mt_data);
  }
  
  int modbus_set_debug(modbus_t *ctx, int flag)
diff -cr -x .git ./libmodbus.orig/src/modbus.h ./libmodbus/src/modbus.h
*** ./libmodbus.orig/src/modbus.h	2015-04-16 15:44:03.678764733 +0200
--- ./libmodbus/src/modbus.h	2015-04-16 13:03:47.394430568 +0200
***************
*** 194,199 ****
--- 194,200 ----
  
  MODBUS_API int modbus_connect(modbus_t *ctx);
  MODBUS_API void modbus_close(modbus_t *ctx);
+ MODBUS_API void modbus_close_mt(modbus_t *ctx);
  
  MODBUS_API void modbus_free(modbus_t *ctx);
  
diff -cr -x .git ./libmodbus.orig/src/modbus-private.h ./libmodbus/src/modbus-private.h
*** ./libmodbus.orig/src/modbus-private.h	2015-04-16 15:44:03.678764733 +0200
--- ./libmodbus/src/modbus-private.h	2015-04-16 13:04:42.214432473 +0200
***************
*** 96,101 ****
--- 96,102 ----
                                     const uint8_t *rsp, int rsp_length);
      int (*connect) (modbus_t *ctx);
      void (*close) (modbus_t *ctx);
+     void (*close_mt) (modbus_t *ctx);
      int (*flush) (modbus_t *ctx);
      int (*select) (modbus_t *ctx, fd_set *rset, struct timeval *tv, int msg_length);
      void (*free) (modbus_t *ctx);
***************
*** 112,117 ****
--- 113,119 ----
      struct timeval byte_timeout;
      const modbus_backend_t *backend;
      void *backend_data;
+     void *mt_data;
  };
  
  void _modbus_init_common(modbus_t *ctx);
diff -cr -x .git ./libmodbus.orig/src/modbus-rtu.c ./libmodbus/src/modbus-rtu.c
*** ./libmodbus.orig/src/modbus-rtu.c	2015-04-16 15:44:03.678764733 +0200
--- ./libmodbus/src/modbus-rtu.c	2015-04-16 13:13:48.166451445 +0200
***************
*** 1061,1066 ****
--- 1061,1077 ----
  #endif
  }
  
+ static void _modbus_rtu_close_mt(modbus_t *ctx)
+ {
+    ssize_t size;
+    _modbus_rtu_close(ctx);
+    
+    modbus_rtu_mt_t *ctx_mt = ctx->mt_data;
+    size = write(ctx_mt->mtp_w, "q", 1);
+    if (size == -1)
+      fprintf(stderr, "ERROR returned by write() (%s)\n", strerror(errno));
+ }
+ 
  static int _modbus_rtu_flush(modbus_t *ctx)
  {
  #if defined(_WIN32)
***************
*** 1088,1094 ****
          return -1;
      }
  #else
!     while ((s_rc = select(ctx->s+1, rset, NULL, NULL, tv)) == -1) {
          if (errno == EINTR) {
              if (ctx->debug) {
                  fprintf(stderr, "A non blocked signal was caught\n");
--- 1099,1111 ----
          return -1;
      }
  #else
!     /* Add pipe descriptor to select */
!     modbus_rtu_mt_t *ctx_mt = ctx->mt_data;
!     FD_SET(ctx_mt->mtp_r, rset);
!   
!     int max_n = (ctx->s > ctx_mt->mtp_r) ? ctx->s : ctx_mt->mtp_r;
!     
!     while ((s_rc = select(max_n+1, rset, NULL, NULL, tv)) == -1) {
          if (errno == EINTR) {
              if (ctx->debug) {
                  fprintf(stderr, "A non blocked signal was caught\n");
***************
*** 1096,1101 ****
--- 1113,1119 ----
              /* Necessary after an error */
              FD_ZERO(rset);
              FD_SET(ctx->s, rset);
+             FD_SET(ctx_mt->mtp_r, rset);
          } else {
              return -1;
          }
***************
*** 1107,1112 ****
--- 1125,1135 ----
          return -1;
      }
  #endif
+     if (FD_ISSET(ctx_mt->mtp_r, rset)) {
+         /* Connection reset. */
+         errno = ECONNRESET;
+         return -1;
+     }
  
      return s_rc;
  }
***************
*** 1134,1139 ****
--- 1157,1163 ----
      _modbus_rtu_pre_check_confirmation,
      _modbus_rtu_connect,
      _modbus_rtu_close,
+     _modbus_rtu_close_mt,
      _modbus_rtu_flush,
      _modbus_rtu_select,
      _modbus_rtu_free
***************
*** 1145,1150 ****
--- 1169,1175 ----
  {
      modbus_t *ctx;
      modbus_rtu_t *ctx_rtu;
+     modbus_rtu_mt_t *ctx_mt;
  
      /* Check device argument */
      if (device == NULL || (*device) == 0) {
***************
*** 1197,1201 ****
--- 1222,1239 ----
  
      ctx_rtu->confirmation_to_ignore = FALSE;
  
+     /* Create pipe chanel */
+     ctx->mt_data = (modbus_rtu_mt_t *) malloc(sizeof(modbus_rtu_mt_t));
+     ctx_mt = (modbus_rtu_mt_t *)ctx->mt_data;
+     
+     int mtp[2];
+     if (pipe(mtp) == -1) {
+         fprintf(stderr, "ERROR Can't create pipe (%s)\n", strerror(errno));
+         modbus_free(ctx);
+         return NULL;
+     }
+     ctx_mt->mtp_r = mtp[0];
+     ctx_mt->mtp_w = mtp[1];
+ 
      return ctx;
  }
diff -cr -x .git ./libmodbus.orig/src/modbus-rtu-private.h ./libmodbus/src/modbus-rtu-private.h
*** ./libmodbus.orig/src/modbus-rtu-private.h	2015-04-16 15:44:03.678764733 +0200
--- ./libmodbus/src/modbus-rtu-private.h	2015-04-16 13:14:23.126452660 +0200
***************
*** 87,90 ****
--- 87,96 ----
      int confirmation_to_ignore;
  } modbus_rtu_t;
  
+ typedef struct _modbus_rtu_mt {
+    /* Pipes for control in multithread */
+     int mtp_r;
+     int mtp_w;
+ } modbus_rtu_mt_t;
+ 
  #endif /* MODBUS_RTU_PRIVATE_H */
diff -cr -x .git ./libmodbus.orig/src/modbus-tcp.c ./libmodbus/src/modbus-tcp.c
*** ./libmodbus.orig/src/modbus-tcp.c	2015-04-16 15:44:03.678764733 +0200
--- ./libmodbus/src/modbus-tcp.c	2015-04-16 14:20:06.914589706 +0200
***************
*** 311,316 ****
--- 311,317 ----
      /* Specialized version of sockaddr for Internet socket address (same size) */
      struct sockaddr_in addr;
      modbus_tcp_t *ctx_tcp = ctx->backend_data;
+     modbus_tcp_mt_t *ctx_mt = ctx->mt_data;
      int flags = SOCK_STREAM;
  
  #ifdef OS_WIN32
***************
*** 353,358 ****
--- 354,361 ----
          return -1;
      }
  
+     ctx_mt->lst_socket = ctx->s;
+ 
      return 0;
  }
  
***************
*** 364,369 ****
--- 367,373 ----
      struct addrinfo *ai_ptr;
      struct addrinfo ai_hints;
      modbus_tcp_pi_t *ctx_tcp_pi = ctx->backend_data;
+     modbus_tcp_mt_t *ctx_mt = ctx->mt_data;
  
  #ifdef OS_WIN32
      if (_modbus_tcp_init_win32() == -1) {
***************
*** 431,436 ****
--- 435,442 ----
          return -1;
      }
  
+     ctx_mt->lst_socket = ctx->s;
+ 
      return 0;
  }
  
***************
*** 444,449 ****
--- 450,466 ----
      }
  }
  
+ static void _modbus_tcp_close_mt(modbus_t *ctx)
+ {
+     _modbus_tcp_close(ctx);
+    
+     modbus_tcp_mt_t *ctx_mt = ctx->mt_data;
+     if (ctx_mt->lst_socket != -1) {
+        shutdown(ctx_mt->lst_socket, SHUT_RDWR);
+        close(ctx_mt->lst_socket);
+   }
+ }
+ 
  static int _modbus_tcp_flush(modbus_t *ctx)
  {
      int rc;
***************
*** 757,762 ****
--- 774,780 ----
      _modbus_tcp_pre_check_confirmation,
      _modbus_tcp_connect,
      _modbus_tcp_close,
+     _modbus_tcp_close_mt,
      _modbus_tcp_flush,
      _modbus_tcp_select,
      _modbus_tcp_free
***************
*** 780,785 ****
--- 798,804 ----
      _modbus_tcp_pre_check_confirmation,
      _modbus_tcp_pi_connect,
      _modbus_tcp_close,
+     _modbus_tcp_close_mt,
      _modbus_tcp_flush,
      _modbus_tcp_select,
      _modbus_tcp_free
***************
*** 789,794 ****
--- 808,814 ----
  {
      modbus_t *ctx;
      modbus_tcp_t *ctx_tcp;
+     modbus_tcp_mt_t *ctx_mt;
      size_t dest_size;
      size_t ret_size;
  
***************
*** 816,821 ****
--- 836,844 ----
      ctx->backend_data = (modbus_tcp_t *) malloc(sizeof(modbus_tcp_t));
      ctx_tcp = (modbus_tcp_t *)ctx->backend_data;
  
+     ctx->mt_data = (modbus_tcp_mt_t *) malloc(sizeof(modbus_tcp_mt_t));
+     ctx_mt = (modbus_tcp_mt_t *)ctx->mt_data;
+ 
      if (ip != NULL) {
          dest_size = sizeof(char) * 16;
          ret_size = strlcpy(ctx_tcp->ip, ip, dest_size);
***************
*** 838,843 ****
--- 861,868 ----
      ctx_tcp->port = port;
      ctx_tcp->t_id = 0;
  
+     ctx_mt->lst_socket = -1;
+ 
      return ctx;
  }
  
***************
*** 846,851 ****
--- 871,877 ----
  {
      modbus_t *ctx;
      modbus_tcp_pi_t *ctx_tcp_pi;
+     modbus_tcp_mt_t *ctx_mt;
      size_t dest_size;
      size_t ret_size;
  
***************
*** 860,865 ****
--- 886,894 ----
      ctx->backend_data = (modbus_tcp_pi_t *) malloc(sizeof(modbus_tcp_pi_t));
      ctx_tcp_pi = (modbus_tcp_pi_t *)ctx->backend_data;
  
+     ctx->mt_data = (modbus_tcp_mt_t *) malloc(sizeof(modbus_tcp_mt_t));
+     ctx_mt = (modbus_tcp_mt_t *)ctx->mt_data;
+ 
      if (node == NULL) {
          /* The node argument can be empty to indicate any hosts */
          ctx_tcp_pi->node[0] = '0';
***************
*** 905,909 ****
--- 934,940 ----
  
      ctx_tcp_pi->t_id = 0;
  
+     ctx_mt->lst_socket = -1;
+ 
      return ctx;
  }
diff -cr -x .git ./libmodbus.orig/src/modbus-tcp-private.h ./libmodbus/src/modbus-tcp-private.h
*** ./libmodbus.orig/src/modbus-tcp-private.h	2015-04-16 15:44:03.678764733 +0200
--- ./libmodbus/src/modbus-tcp-private.h	2015-04-16 13:54:07.822535528 +0200
***************
*** 53,56 ****
--- 53,61 ----
      char service[_MODBUS_TCP_PI_SERVICE_LENGTH];
  } modbus_tcp_pi_t;
  
+ typedef struct _modbus_tcp_mt {
+     /* Main listen socket */
+     int lst_socket;
+ } modbus_tcp_mt_t;
+ 
  #endif /* MODBUS_TCP_PRIVATE_H */
